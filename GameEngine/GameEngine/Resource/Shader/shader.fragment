#version 330 core

// Uniform values
uniform sampler2D Texture;// Texture ID
uniform float Tme;				// Timer	
uniform	vec2 WavePhase;	// x,y waves phase
uniform bool WaveToggle;	// Wave toggle
uniform int WaveType;		// Wave type
uniform float Time;				// Delta time

// interpolated valuse form the vertex shaders
in vec4 fragmentColor;
in vec2 fragTexCoord;
flat in int fragmentType;

// Ouput data
out vec4 finalColor;

// Wave functions
vec2 SineWave( vec2 phase ) {
	if(WaveToggle) {
		// wave distortion
		float x = cos( 25.0*phase.y + 30.0*phase.x + 6.28*WavePhase.x) * 0.05;
		float y = sin( 25.0*phase.y + 30.0*phase.x + 6.28*WavePhase.y) * 0.05;
		return vec2(phase.x+x, phase.y+y);
	}
	else phase;
}

vec4 RippleEffect( vec2 texCoord )
{
	if(WaveToggle) {
		vec2 cPos = -1.0 + 2.0 * texCoord.xy / vec2(1, 1).xy;
		float cLength = length(cPos);

		vec2 uv = texCoord.xy/vec2(1, 1).xy+(cPos/cLength)*cos(cLength*63.0-Time*4.0)*0.03;
		vec3 col = texture2D(Texture,uv).xyz;

		return vec4(col,1.0);
	}
	
	else{
		finalColor = fragmentColor * texture(Texture, fragTexCoord);
	}
}

void main()
{

	// If type is text,
	if (fragmentType == 0) {
		finalColor = fragmentColor * texture(Texture, fragTexCoord).r;
	}	
	
	// If not,
	else	{
		finalColor = fragmentColor * texture(Texture, SineWave(fragTexCoord));
		//finalColor = RippleEffect(fragTexCoord);
	}
}