#version 330 core

// Input vertex data, different for all executions of this shader.
layout(location = 0) in vec3 vertexPosition;
layout(location = 1) in vec2 vertTexCoord;

// Basic pipeline uniform
uniform mat4 Model;
uniform mat4 Viewport;
uniform mat4 Projection;

// Texture render uniform
uniform vec4 Color;
uniform mat4 Animation;
uniform int Type;

// Light Info
uniform vec3 LightDiff;
uniform float LightRadius;
uniform float LightDistance;

// Mother emitter info+
uniform int  Emitter_Type;
uniform bool Emitter_Explo;
uniform vec3 Emitter_Dir;
uniform vec3 Emitter_Color;
uniform vec3 Emitter_EdgeColor;
uniform float Emitter_Spd;
uniform float Emitter_Bound;
uniform bool Emitter_RndScl;

// Particle info
uniform vec3 Particle_Vel;
uniform vec3 Particle_Spd;
uniform vec3 Particle_Pos;
uniform float Particle_Rot;
uniform float Particle_Life;
uniform float Particle_Fade;

//Output data
out vec4 fragmentColor;
out vec2 fragTexCoord;
flat out int fragmentType;

highp float rand(vec2 co)
{
    highp float a = 12.9898;
    highp float b = 78.233;
    highp float c = 43758.5453;
    highp float dt= dot(co.xy ,vec2(a,b));
    highp float sn= mod(dt,3.14);
    return fract(sin(sn) * c);
}

void RenderParticle(mat4 MVP)
{
	vec3 norm_dir = normalize(Emitter_Dir);
	vec3 new_force;
	if (length(norm_dir) == 0){
		new_force = vec3(Particle_Vel.x * Particle_Spd.x,
		Particle_Vel.y * Particle_Spd.y, 0);
	}
	
	else {
		new_force = vec3(Particle_Vel.x * norm_dir.x + norm_dir.x,
		Particle_Vel.y * norm_dir.y + norm_dir.y, 0);
	}
	
	gl_Position = MVP * vec4(Particle_Pos.x + new_force.x, Particle_Pos.y + new_force.y, 0, 1);

	float new_fade = Particle_Fade * length(new_force) / Emitter_Bound;
	
	float new_life = Particle_Life;
	new_life -= new_fade;
	
	// Roatation...
	
	if (length(Emitter_EdgeColor) != 0) {
		vec3 colorEffect = Emitter_EdgeColor - Emitter_Color;
		fragmentColor = vec4((Color.xyz + colorEffect * new_fade).xyz, Particle_Life);
	}
}

void RefreshParticle(void)
{
	if (Emitter_Explo) {
		vec3 new_dir;
		float repos_offset = 3.0 / 5.0;
		float new_pos = Emitter_Bound * repos_offset;
		
		if (Emitter_Type == 1) {
			vec3 base_position = Particle_Pos;
			base_position += vec3(rand(vec2(-new_pos, new_pos)), rand(vec2(-new_pos, new_pos)), 0);
		}
		else if (Emitter_Type == 3) {
			
		}
		else {
			//new_pos = Particle_Pos;
		}
		
		if (Emitter_RndScl) {
		}
		
		fragmentColor = vec4(Color.xyz, 1.0);
	}
}

void main(){
	
	// Get MVP
	mat4 MVP = Projection * Viewport * Model;
	gl_Position = MVP * vec4(vertexPosition, 1);
	
	// Set Color
	// If type is light,
	if (Type == 3) {
		float intensity = clamp(1.0 - LightDistance / LightRadius, 0.0, 1.0);
		fragmentColor = vec4(LightDiff.x, LightDiff.y, LightDiff.z, 1.0) * intensity;
	}
	
	// Unless,
	else {
	
		//if(Type == 2)
		//{
			//if (Particle_Life > 0.f)
				//RenderParticle(MVP);
			//else 
				//RefreshParticle();

			// Set model vertex
			//gl_Position = MVP * vec4(vertexPosition, 1);	
		//}
	
		//else {
			// Set model vertex
			
		//}
		
		fragmentColor = Color;
	}
	
	// Set texture coordinate
	vec4 newTexCoord = Animation * vec4(vertTexCoord, 0, 1);
	
	// If type is text,
	if (Type == 0) {
		fragTexCoord = vertTexCoord;
	}
	
	// If not,
	else {
		fragTexCoord = vec2(newTexCoord.x, -newTexCoord.y);
	}
	
	fragmentType = Type;
	
}