#include <iostream>
#include <vector>
#include <map>
#include <algorithm>
#include <iterator>

using namespace std;

bool cmp(const pair<int, int>  &p1, const pair<int, int> &p2)
{
    return p1.second < p2.second;
}

int main()
{
    map<int, int> m;
    for(int i = 0; i < 10; ++i)
        m[i] = i * -i;

    vector<pair<int, int> > v;
    copy(m.begin(), m.end(), back_inserter(v));

    sort(v.begin(), v.end(), cmp);

    for(int i = 0; i < v.size(); ++i)
        cout << v[i].first << " : " << v[i].second << endl;
    return 0;
}

	bool order_comp(ZOrder* a, ZOrder* b)
	{
		if (a->m_isOrtho && !b->m_isOrtho)
		{
			return false;
		}
		else if (!a->m_isOrtho && b->m_isOrtho)
		{
			return true;
		}
		else
		{
			return a->m_Order < b->m_Order;
		}
			
	}

	void GraphicSystem::SortOrders(void)
{
	auto begin = m_OrderList.begin();
	auto end = m_OrderList.end();

	std::sort(begin, end, order_comp);
}